import { BattleEntity } from "../../entities/BattleEntity";

export default (scene: Phaser.Scene, entityA: BattleEntity, entityB: BattleEntity, onComplete: Function) => {
    const ogx = entityA.ax;
    const ogy = entityA.ay;

    const left = entityA.ax < entityB.ax;
    const up = entityA.ay < entityB.ay;

    entityA.casting();
    setTimeout(() => {
        const arrows: Phaser.GameObjects.Sprite[] = [];
        for (let i = 0; i < 30; i++) {
            const x = (Math.random() * 100) - 50;
            const y = (Math.random() * 100) - 50;
            const delay = Math.random() * 400;
            const duration = 300 + (Math.random() * 700);

            const rand = Math.random();
            const key = rand < 0.333 ? "pen_arrow1" : rand < 0.666 ? "pen_arrow2" : "pen_arrow3";

            const spr = scene.add.sprite(entityA.ax + x, entityA.ay + y, key);
            spr.alpha = 0;
            spr.depth = 1000;
            spr.setScale(0, 0);
            const dx = entityB.ax - spr.x;
            const dy = entityB.ay - spr.y;
            const theta = Phaser.Math.RadToDeg(Math.atan2(dy, dx));
            const s = 0.6 + (Math.random());
            spr.angle = theta;
            scene.tweens.add({ targets: spr, delay, duration, ease: "Bounce.easeOut", scaleX: s, scaleY: s, alpha: 1 });
            arrows.push(spr);
        }
        setTimeout(() => {
            entityA.reset();
        }, 500);
        setTimeout(() => {
            for (let spr of arrows) {
                const delay = Math.random() * 300;
                const duration = 800 + (Math.random() * 500);
                const dx = entityB.ax - entityA.ax;
                const dy = entityB.ay - entityA.ay;
                const theta = Math.atan2(dy, dx);
                scene.tweens.add({
                    targets: spr,
                    x: spr.x + Math.cos(theta) * 600,
                    y: spr.y + Math.sin(theta) * 600,
                    delay,
                    duration,
                    ease: "Back.easeInOut"
                });
                setTimeout(() => {
                    scene.tweens.add({
                        targets: spr,
                        alpha: 0,
                        duration: 1000,
                        ease: "Power2.easeOut",
                        onComplete: () => {
                            spr.destroy();
                        }
                    });
                }, delay + 350);
            }
            setTimeout(() => {
                scene.tweens.add({
                    targets: entityA,
                    ax: ogx + (left ? 20 : -20),
                    ay: ogy + (up ? 20 : -20),
                    aangle: (left ? 20 : -20),
                    duration: 400,
                    ease: "Back.easeInOut"
                });
            }, 100);
            setTimeout(() => {
                scene.tweens.add({
                    targets: entityA,
                    ax: ogx,
                    ay: ogy,
                    aangle: 0,
                    duration: 500,
                    ease: "Power2.easeOut",
                    onComplete: () => {
                        entityA.stats.ap = 0;
                        onComplete();
                    }
                });
            }, 1300);
        }, 1300);
    }, 500);
};